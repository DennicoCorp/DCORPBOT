import logging
import telebot
try:
    from config import BOT_TOKEN
except ImportError:
    print("–¢–æ–∫–µ–Ω BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py!")
    exit()

try:
    # –î–æ–±–∞–≤–∏–ª–∏ add_user_subscription –∏ check_user_subscription
    from database import initialize_database, add_or_update_user, add_user_subscription, check_user_subscription
except ImportError:
    print("–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º –∏–∑ database.py!")
    # –ó–∞–≥–ª—É—à–∫–∏
    def initialize_database(): logger.error("initialize_database –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    def add_or_update_user(tid, uname, fname, lname): logger.error("add_or_update_user –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    def add_user_subscription(tid, dur, plan): logger.error("add_user_subscription –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞."); return False
    def check_user_subscription(tid): logger.error("check_user_subscription –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞."); return False # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –ë–î –≤–µ—Ä–Ω–µ–º False
    # exit()

try:
    from ai_interface import get_custom_ai_response
except ImportError:
    print("–§–∞–π–ª ai_interface.py –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è get_custom_ai_response –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    def get_custom_ai_response(prompt: str, **kwargs) -> str: # –ó–∞–≥–ª—É—à–∫–∞
        logger.error("–§—É–Ω–∫—Ü–∏—è get_custom_ai_response –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞. AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
initialize_database()
logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")


@bot.message_handler(commands=['start'])
def send_welcome(message: telebot.types.Message):
    user = message.from_user
    try:
        add_or_update_user(user.id, user.username, user.first_name, user.last_name)
        logger.info(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user.username or user.first_name} (ID: {user.id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –ë–î: {e}", exc_info=True)

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>! üëã\n\n"
        f"–Ø –±–æ—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ DeepSeek.\n"
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
        f"‚û°Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /get_trial.\n"
        f"‚û°Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö (–∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è): /subscribe.\n"
        f"‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: /status.\n"
        f"‚û°Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? /help."
    )
    bot.reply_to(message, welcome_text)


@bot.message_handler(commands=['get_trial'])
def get_trial_subscription(message: telebot.types.Message):
    user = message.from_user
    trial_duration_days = 1  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

    if check_user_subscription(user.id):
        bot.reply_to(message, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–∞–ª, –∏–º–µ—è –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    if add_user_subscription(user.id, duration_days=trial_duration_days, plan_name="–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø"):
        bot.reply_to(message,
                     f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ {trial_duration_days} –¥–µ–Ω—å/–¥–Ω–µ–π.")
        logger.info(f"–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ {trial_duration_days} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")
    else:
        bot.reply_to(message,
                     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")


# --- –ù–û–í–´–ô –•–≠–ù–î–õ–ï–† –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@bot.message_handler(commands=['status'])
def check_subscription_status(message: telebot.types.Message):
    user_id = message.from_user.id
    if check_user_subscription(user_id):
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        bot.reply_to(message, "–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! ‚úÖ")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. ‚ùå\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_trial –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è /help (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å)
@bot.message_handler(commands=['help'])
def send_help(message: telebot.types.Message):
    # ... –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è /help ...
    bot.reply_to(message,
                 "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /get_trial, /status, /help. –î–ª—è –æ–±—â–µ–Ω–∏—è —Å AI –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç.")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è /subscribe (–∑–∞–≥–ª—É—à–∫–∞)
@bot.message_handler(commands=['subscribe'])
def send_subscribe_info(message: telebot.types.Message):
    # ... –≤–∞—à —Ç–µ–∫—Å—Ç-–∑–∞–≥–ª—É—à–∫–∞ ...
    bot.reply_to(message, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_message_for_ai(message: telebot.types.Message):
    user = message.from_user
    user_input = message.text

    if user_input.startswith('/'): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã –≤—ã—à–µ
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {user_input}")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è AI: \"{user_input[:50]}...\"")

    # --- –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ---
    if check_user_subscription(user.id):
        bot.send_chat_action(message.chat.id, 'typing')
        ai_response = get_custom_ai_response(user_input) # –§—É–Ω–∫—Ü–∏—è –∏–∑ ai_interface.py

        if ai_response:
            bot.reply_to(message, ai_response)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}.")
        else:
            bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ –∑–∞–ø—Ä–æ—Å: \"{user_input[:50]}...\"")
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
        no_subscription_message = (
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. üòî\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /get_trial."
        )
        bot.reply_to(message, no_subscription_message)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ AI (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏).")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")