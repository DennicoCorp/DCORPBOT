import logging
import telebot
try:
    from config import BOT_TOKEN
except ImportError:
    print("–¢–æ–∫–µ–Ω BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py!")
    exit()

try:
    from database import initialize_database, add_or_update_user # –î–æ–±–∞–≤–∏–ª–∏ add_or_update_user
except ImportError:
    print("–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º –∏–∑ database.py!")
    # –ó–∞–≥–ª—É—à–∫–∏
    def initialize_database(): logger.error("initialize_database –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    def add_or_update_user(tid, uname, fname, lname): logger.error("add_or_update_user –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")

try:
    from ai_interface import get_custom_ai_response
except ImportError:
    print("–§–∞–π–ª ai_interface.py –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è get_custom_ai_response –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    def get_custom_ai_response(prompt: str, **kwargs) -> str: # –ó–∞–≥–ª—É—à–∫–∞
        logger.error("–§—É–Ω–∫—Ü–∏—è get_custom_ai_response –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞. AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
initialize_database()
logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")

@bot.message_handler(commands=['start'])
def send_welcome(message: telebot.types.Message):
    user = message.from_user
    user_name = message.from_user.first_name
    try:
        add_or_update_user(
            telegram_id=user.id,
            username=user.username, # –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª
            first_name=user.first_name,
            last_name=user.last_name  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        )
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user.username or user.first_name} (ID: {user.id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –ë–î: {e}", exc_info=True)
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>! üëã\n\n"
        f"–Ø –±–æ—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ DeepSeek. –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
        f"‚û°Ô∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ (–∫–æ–≥–¥–∞ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è), –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe.\n"
        f"‚û°Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ö–æ–º–∞–Ω–¥–∞ /help."
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['help'])
def send_help(message: telebot.types.Message):
    help_text = "–ß—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ—Ä–∞–∑—É."
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª /help.")
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['subscribe'])
def send_subscribe_info(message: telebot.types.Message):
    subscribe_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ–∑–∂–µ."
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª /subscribe.")
    bot.reply_to(message, subscribe_text)


# --- –ù–û–í–´–ô –•–≠–ù–î–õ–ï–† –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) ---
# –û–Ω –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∏—Ö.
# func=lambda message: True - –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
# content_types=['text'] - —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ª–æ–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_message_for_ai(message: telebot.types.Message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    user_input = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è message_handler –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤—ã—à–µ)
    if user_input.startswith('/'):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É: {user_input}, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        # bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è AI: \"{user_input[:50]}...\"")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç "–¥—É–º–∞–µ—Ç" (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Typing action)
    bot.send_chat_action(message.chat.id, 'typing')

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ai_response = get_custom_ai_response(user_input)

    if ai_response:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.reply_to(message, ai_response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {user_id}).")
    else:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ ai_interface)
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}) –Ω–∞ –∑–∞–ø—Ä–æ—Å: \"{user_input[:50]}...\"")

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")